// @flow
/**
 * Flowtype definitions for MongoBinaryDownload
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.7.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

import { DebugFn, DebugPropT, DownloadProgressT } from "../types";
import HttpsProxyAgent from "https-proxy-agent";
export interface MongoBinaryDownloadOpts {
  version?: string;
  downloadDir?: string;
  platform?: string;
  arch?: string;
  debug?: DebugPropT;
  checkMD5?: boolean;
}
declare interface HttpDownloadOptions {
  hostname: string;
  port: string;
  path: string;
  method: "GET" | "POST";
  agent: HttpsProxyAgent | void;
}
declare export default class MongoBinaryDownload {
  debug: DebugFn;
  dlProgress: DownloadProgressT;
  _downloadingUrl: string;
  checkMD5: boolean;
  downloadDir: string;
  arch: string;
  version: string;
  platform: string;
  constructor(x: MongoBinaryDownloadOpts): this;
  getMongodPath(): Promise<string>;
  startDownload(): Promise<string>;
  makeMD5check(
    urlForReferenceMD5: string,
    mongoDBArchive: string
  ): Promise<boolean | void>;
  download(downloadUrl: string): Promise<string>;
  extract(mongoDBArchive: string): Promise<string>;
  httpDownload(
    httpOptions: HttpDownloadOptions,
    downloadLocation: string,
    tempDownloadLocation: string
  ): Promise<string>;
  printDownloadProgress(chunk: any): void;
  locationExists(location: string): boolean;
}
declare export {};
